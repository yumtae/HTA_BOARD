pipeline {
    environment { 
        repository = 'yumtae/security'  //docker hub id와 repository 이름
        DOCKERHUB_CREDENTIALS = credentials('dockerhub') // jenkins에 등록해 놓은 docker hub credentials yumtae      
      
        TARGET_HOST = 'ubuntu@43.201.34.226'
    }
    agent any

    tools {
        // 설치된 Maven의 이름
        maven "maven"
    }

    stages {
        stage('Git Pull') {
            steps {
                 // Get some code from a GitHub repository
                git branch: 'main', credentialsId: 'jenkinsid', url: 'https://github.com/yumtae/web'

            }
            post { 
                success {  //성공하면 실행되는 step
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure { //실패하면 실행되는 step
                    sh 'echo "Fail Cloned Repository"'
                    exit 1 //파이프라인 중단
                }
            }    
        }

         //clone 받은 프로젝트 안의 Spring10_Security_War 디렉토리에서 stage 실행
        stage('Build') {
            steps {    
                dir("Spring10_Security_War"){   ///var/jenkins_home/workspace/test_item/Spring10_Security_War
                    sh "mvn -Dmaven.test.skip=true clean compile package"
                    }  
            }
            post {
                success {
                    echo 'maven build success'
                }

                failure {
                    echo 'maven build failed'
                    exit 1
                }
            } 

        }

        stage('Dockerizing'){
            steps{
                dir("Spring10_Security_War"){   ///var/jenkins_home/workspace/test_item/Spring10_Security_War/Dockerfile 위치
                    sh 'echo " Image Bulid Start"'
                    sh 'docker build . -t $repository:$BUILD_NUMBER'
                    sh 'docker build . -t $repository'
                }
            }
                post {
                    success {
                        sh 'echo "Bulid Docker Image Success"'
                    }

                    failure {
                        sh 'echo "Bulid Docker Image Fail"'
                        exit 1
                    }
                }
        }
    
        stage('Login'){
            steps{
sh 'echo "비밀번호!" | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' 
            }
            
            post {
                success {
                    sh 'echo "Docker Login Success"'
                }

                failure {
                    sh 'echo "Docker Login Fail"'
                    exit 1
                }
            }
        }

        stage('Docker hub push'){
            steps{
                sh 'echo " docker hub push"'
                sh 'docker push  $repository:$BUILD_NUMBER'
                sh 'docker push  $repository'
            }
            post {
                success {
                    sh 'echo "Docker hub push Success"'
                }

                failure {
                    sh 'echo "Docker hub push Fail"'
                    exit 1
                }
            }
        }    

     stage('Cleaning up'){
            steps{
                sh 'echo " docker image rmi"'
                sh "docker rmi $repository:$BUILD_NUMBER" // docker image 제거
                sh "docker rmi $repository"              // docker image 제거
            }
            post {
                success {
                    sh 'echo "Docker hub push Success"'
                }

                failure {
                    sh 'echo "Docker hub push Fail"'
                    exit 1
                }
            }
        }      
        
        
       
       stage('multiline ssh') {
            steps {        
                sshagent (credentials: ['deploy-ec2']) {
                sh """
                    ssh -o StrictHostKeyChecking=no ${TARGET_HOST} '
                    sudo docker-compose up -d
                    '
                """
                }
           }
     }
}
}
